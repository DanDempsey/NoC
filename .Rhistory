C, Tau, abundance_hyperprior, epsilon, distance, x_weight, t_weight,
accept, dist_met, p, PACKAGE = 'NoC' )
if ( res[[17]] == 0 ) { return(NULL) }
list( C = res[[10]], x = res[[3]], t = res[[4]], distance = res[[14]] )
}
devtools::check()
devtools::build()
28 * 8
install.packages("../NoC_0.1.0.tar.gz", repos = NULL, type = "source")
library( NoC )
?CD_ABC
setwd( ..)
setwd( "..")
setwd( "Species_Estimation/")
### RNG settings
RNGkind( "L'Ecuyer-CMRG" ) # Carries RNG stream across parallel computing, so that parallel code is reproducible
### Parameter values
m <- 20
# Aves
Aves_parameters <- list()
Aves_parameters$theta_N <- c( log(1e9), 1.1 )
Aves_parameters$theta_l <- c( log(30), 0.08 )
Aves_parameters$theta_x <- log( 2 )
Aves_parameters$m <- m
# Isopoda
Isopoda_parameters <- list()
Isopoda_parameters$theta_N <- c( log(1e9), 1.5 )
Isopoda_parameters$theta_l <- c( log(0.0001), 1 )
Isopoda_parameters$theta_x <- log( 0.6 )
Isopoda_parameters$m <- m
# Mammalia
Mammalia_parameters <- list()
Mammalia_parameters$theta_N <- c( log(1e9), 1.1 )
Mammalia_parameters$theta_l <- c( log(30), 0.15 )
Mammalia_parameters$theta_x <- log( 1 )
Mammalia_parameters$m <- m
# Nematoda
Nematoda_parameters <- list()
Nematoda_parameters$theta_N <- c( log(1e9), 1.5 )
Nematoda_parameters$theta_l <- c( log(0.0001), 1 )
Nematoda_parameters$theta_x <- log( 1.2 )
Nematoda_parameters$m <- m
### Load in analysis code
source( 'Code/Application/0_Data_Analysis_Function.R' )
analysis_function <- function( z, synonym_list, param_list, metric = 'm', p = 2,
pilot_iterations, fit_iterations, fixed_run = TRUE,
hyperprior_run = FALSE,
n_cores = detectCores() - 1, wd = getwd() ) {
taxa_data <- read_taxa( paste0(z, '_20240815.zip') )
ABC_data <- construct_ABC_data( taxa_data, synonym_list )
browser()
res <- run_ABC( dat = ABC_data, param_list = param_list,
metric = metric, p = p,
pilot_iterations = pilot_iterations,
fit_iterations = fit_iterations,
fixed_run = fixed_run, hyperprior_run = hyperprior_run,
n_cores = n_cores )
default_wd <- getwd( )
if ( !dir.exists(wd) ) { dir.create( wd ) }
setwd( wd )
if ( fixed_run ) {
output_function( res$fixed, ABC_data, '', '', z )
}
if ( hyperprior_run ) {
output_function( res$hyperprior, ABC_data, '_hyperprior', ' Hyperprior', z )
}
setwd( default_wd )
return( invisible(NULL) )
}
# Combine all
par_list <- list( Aves = Aves_parameters, Isopoda = Isopoda_parameters,
Mammalia = Mammalia_parameters, Nematoda = Nematoda_parameters )
### Run fit for all data
pits <- 1e4
fits <- 1e4
set.seed( 20240820 )
i <- 1
nm <- names( par_list )[i]
cat( paste0(nm, ':\n') )
analysis_function( nm, param_list = par_list[[i]],
pilot_iterations = pits, fit_iterations = fits,
wd = paste0('Output/Real_Data_Analysis/', nm) )
ABC_data
### Fit the data via ABC
run_ABC <- function( dat, param_list, metric = 'm', p = 2, pilot_iterations,
fit_iterations, fixed_run = TRUE, hyperprior_run = FALSE,
n_cores = detectCores() - 1 ) {
browser()
# Extract parameters
x <- dat$x
t <- dat$t
theta_N <- param_list$theta_N
theta_N_hyperprior <- param_list$theta_N_hyperprior
theta_l <- param_list$theta_l
theta_x <- param_list$theta_x
m <- param_list$m
res_list <- list()
# Fixed prior run
if ( fixed_run ) {
# Pilot run
tic()
pilot_run <- CD_ABC( x = x, t = t, theta_N = theta_N, theta_x = theta_x, theta_l = theta_l,
m = m, iters = pilot_iterations, epsilon = Inf, metric = metric, p = p,
cores = n_cores )
pilot_speed <- toc( quiet = TRUE )
cat( paste0('Pilot: ', time_taken(pilot_speed), ' seconds.\n') )
sim_epsilon <- quantile( pilot_run$distance, 0.1 )
# Actual fit
tic()
res <- CD_ABC( x = x, t = t, theta_N = theta_N, theta_x = theta_x, theta_l = theta_l,
m = m, iters = fit_iterations, epsilon = sim_epsilon, metric = metric, p = p,
cores = n_cores )
res_speed <- toc( quiet = TRUE )
cat( paste0('Actual fit: ', time_taken(res_speed), ' seconds.\n') )
res_list$fixed <- res
}
# Hyperprior run
if ( hyperprior_run ) {
# Pilot run
tic()
pilot_run <- CD_ABC( x = x, t = t, theta_N = theta_N_hyperprior, theta_x = theta_x, theta_l = theta_l,
m = m, iters = pilot_iterations, epsilon = Inf, abundance_hyperprior = TRUE,
metric = metric, p = p, cores = n_cores )
pilot_speed <- toc( quiet = TRUE )
cat( paste0('Hyperprior pilot: ', time_taken(pilot_speed), ' seconds.\n') )
sim_epsilon <- quantile( pilot_run$distance, 0.1 )
# Actual fit
tic()
res <- CD_ABC( x = x, t = t, theta_N = theta_N_hyperprior, theta_x = theta_x, theta_l = theta_l,
m = m, iters = fit_iterations, epsilon = sim_epsilon, abundance_hyperprior = TRUE,
metric = metric, p = p, cores = n_cores )
res_speed <- toc( quiet = TRUE )
cat( paste0('Hyperprior fit: ', time_taken(res_speed), ' seconds.\n') )
res_list$hyperprior <- res
}
res_list
}
### Create graphs and save results
output_function <- function( res, dat, suffix_file, suffix_graph, z ) {
# Save results
complete_res <- list( res = res, dat = dat )
save( complete_res, file = 'res.Rdata' )
rm( complete_res )
# Make graphs
x <- dat$x
t <- dat$t
# Plot the data
png( paste0('Author_and_Discovery_Data_', z, '.png') )
par( mfrow = c(2, 1) )
plot( names(x), x, type = 'l', main = 'Number of Authors', xlab = 'Year', ylab = '' )
plot( names(x), t, type = 'l', main = 'Discoveries per Year', xlab = 'Year', ylab = '' )
par( mfrow = c(1, 1) )
dev.off()
# Plot the approximate posterior of C
png( paste0('Total_Species_Num_Approx_Posterior_', z, suffix_file, '.png') )
C_dens <- density( res$C )
approx_mode <- C_dens$x[which.max(C_dens$y)]
remove_inds_raw <- which( C_dens$x < sum(dat$t) )
remove_inds <- remove_inds_raw[-length(remove_inds_raw)]
C_dens$x <- C_dens$x[-remove_inds]
C_dens$y <- C_dens$y[-remove_inds]
C_dens$y[1] <- 0
plot( C_dens, main = paste0(z, suffix_graph),
xlab = '', ylab = '', xlim = c(0, max(C_dens$x)), yaxt = 'n' )
#abline( v = approx_mode, lty = 2, col = 'blue' )
dev.off()
# Plot the simulated number of authors per year
png( paste0('Effort_Proxy_ABC_', z, suffix_file, '.png') )
xhat <- res$x_hat
plot( x, type = 'n', ylim = range(rbind(x, xhat)), ylab = 'Effort Proxy',
xlab = 'Time', main = paste0(z, suffix_graph) )
grid()
for ( i in 1:nrow(xhat) ) {
lines( xhat[i, ], col = alpha('grey', 0.5) )
}
lines( x )
dev.off()
# Plot the simulated number of discoveries per year
png( paste0('Discovery_Time_ABC_', z, suffix_file, '.png') )
that <- res$t_hat
plot( t, type = 'n', ylim = range(rbind(t, that)), ylab = 'Number of Discoveries',
xlab = 'Time', main = paste0(z, suffix_graph) )
grid()
for ( i in 1:nrow(that) ) {
lines( that[i, ], col = alpha('grey', 0.5) )
}
lines( t )
dev.off()
}
analysis_function <- function( z, synonym_list, param_list, metric = 'm', p = 2,
pilot_iterations, fit_iterations, fixed_run = TRUE,
hyperprior_run = FALSE,
n_cores = detectCores() - 1, wd = getwd() ) {
taxa_data <- read_taxa( paste0(z, '_20240815.zip') )
ABC_data <- construct_ABC_data( taxa_data, synonym_list )
res <- run_ABC( dat = ABC_data, param_list = param_list,
metric = metric, p = p,
pilot_iterations = pilot_iterations,
fit_iterations = fit_iterations,
fixed_run = fixed_run, hyperprior_run = hyperprior_run,
n_cores = n_cores )
default_wd <- getwd( )
if ( !dir.exists(wd) ) { dir.create( wd ) }
setwd( wd )
if ( fixed_run ) {
output_function( res$fixed, ABC_data, '', '', z )
}
if ( hyperprior_run ) {
output_function( res$hyperprior, ABC_data, '_hyperprior', ' Hyperprior', z )
}
setwd( default_wd )
return( invisible(NULL) )
}
analysis_function( nm, param_list = par_list[[i]],
pilot_iterations = pits, fit_iterations = fits,
wd = paste0('Output/Real_Data_Analysis/', nm) )
x
t
dat
Aves <- list( Effort_Proxy = dat$x, Discovery_Times = t )
save( Aves, file = 'Aves.Rdata' )
i <- 2
nm <- names( par_list )[i]
cat( paste0(nm, ':\n') )
analysis_function( nm, param_list = par_list[[i]],
pilot_iterations = pits, fit_iterations = fits,
wd = paste0('Output/Real_Data_Analysis/', nm) )
Isopoda <- list( Effort_Proxy = dat$x, Discovery_Times = t )
Isopoda$Effort_Proxy
Isopoda$Discovery_Times
save( Isopoda, file = 'Isopoda.Rdata' )
i <- 3
nm <- names( par_list )[i]
cat( paste0(nm, ':\n') )
analysis_function( nm, param_list = par_list[[i]],
pilot_iterations = pits, fit_iterations = fits,
wd = paste0('Output/Real_Data_Analysis/', nm) )
Mammalia <- list( Effort_Proxy = dat$x, Discovery_Times = t )
Mammalia$Effort_Proxy
save( Mammalia, file = 'Mammalia.Rdata' )
Mammalia
i <- 4
nm <- names( par_list )[i]
cat( paste0(nm, ':\n') )
analysis_function( nm, param_list = par_list[[i]],
pilot_iterations = pits, fit_iterations = fits,
wd = paste0('Output/Real_Data_Analysis/', nm) )
Nematoda <- list( Effort_Proxy = dat$x, Discovery_Times = t )
save( Nematoda, file = 'Nematoda.Rdata' )
Nematoda$Effort_Proxy
Nematoda$Discovery_Times
load( file = 'Aves.Rdata' )
Aves$Effort_Proxy
Aves$Discovery_Times
names( Aves$Discovery_Times ) <- names( Aves$Effort_Proxy )
Aves
t_ind <- names( Aves$Effort_Proxy )
t_ind
as.numeric( t_ind )
test_ind <- 1758:2019
test_ind %in% t_ind
test_ind %in% t_ind %>% all
save( Aves, file = 'Aves.Rdata')
load( file = 'Isopoda' )
load( file = 'Isopoda.Rdata' )
Isopoda
names( Isopoda$Discovery_Times ) <- t_ind
Isopoda
save( Isopoda, file = 'Isopoda.Rdata')
load( 'Mammalia.Rdata' )
names( Mammalia$Discovery_Times ) <- t_ind
save( Mammalia, file = 'Mammalia.Rdata')
load( 'Nematoda.Rdata' )
save( Nematoda, file = 'Nematoda.Rdata')
Aves
as.data.frame(Aves)
Aves <- as.data.frame(Aves)
save( Aves, file = 'Aves.Rdata')
Isopoda <- as.data.frame(Isopoda)
Isopoda
save( Isopoda, file = 'Isopoda.Rdata')
Mammalia <- as.data.frame(Mammalia)
Mammalia
save( Mammalia, file = 'Mammalia.Rdata')
Nematoda <- as.data.frame(Nematoda)
Nematoda
save( Nematoda, file = 'Nematoda.Rdata')
devtools::document()
devtools::check()
load( file = 'data/Aves.Rdata' )
load( file = 'data/Isopoda.Rdata' )
load( file = 'data/Mammalia.Rdata' )
load( file = 'data/Nematoda.Rdata' )
usethis::use_data(Aves, Isopoda, Mammalia, Nematoda, overwrite = TRUE)
devtools::document()
devtools::check()
devtools::build()
install.packages("../NoC_0.1.0.tar.gz", repos = NULL, type = "source")
library( NoC )
data( Aves )
Aves
install.packages("../NoC_0.1.0.tar.gz", repos = NULL, type = "source")
library( NoC )
data( Aves )
Aves
?Aves
?CD_ABC
?sort
library( NoC )
?CD_ABC
data( Aves )
?Aves
?AirPassengers
?Mammalia
data( Mammalia )
Aves
Mammalia
plot( Mammalia$Discovery_Times )
plot( Aves$Discovery_Times )
devtools::check()
devtools::document()
devtools::check()
devtools::build()
?Aves
devtools::document()
?Aves
devtools::document()
?Aves
devtools::document()
?Aves
devtools::document()
?Aves
?Isopoda
CD_ABC( 1e4, x = Aves$Effort_Proxy, t = Aves$Discovery_Times, c(1e9, 0.2), 1, c(5, 0.01))
devtools::check()
devtools::check()
devtools::build()
install.packages("../NoC_0.1.0.tar.gz", repos = NULL, type = "source")
library( NoC )
?CD_ABC
data( Aves )
CD_ABC( 1e4, x = Aves$Effort_Proxy, t = Aves$Discovery_Times, theta_N = c(1e9, 2), theta_x = 1,
theta_l = c(log(20), 0.2) )
devtools::clean_dll()
devtools::clean_dll()
devtools::check()
devtools::build()
devtools::install()
data( Aves )
CD_ABC( 1e4, x = Aves$Effort_Proxy, t = Aves$Discovery_Times, theta_N = c(1e9, 2), theta_x = 1,
theta_l = c(log(20), 0.2) )
devtools::install()
library( NoC )
data( Aves )
CD_ABC( 1e4, x = Aves$Effort_Proxy, t = Aves$Discovery_Times, theta_N = c(1e9, 2), theta_x = 1,
theta_l = c(log(20), 0.2) )
getNativeSymbolInfo("C_ABC_Iteration", PACKAGE = "NoC")
devtools::clean_dll()
devtools::check()
devtools::build()
devtools::install()
library( NoC )
data( Aves )
CD_ABC( 1e4, x = Aves$Effort_Proxy, t = Aves$Discovery_Times, theta_N = c(1e9, 2), theta_x = 1,
theta_l = c(log(20), 0.2) )
getNativeSymbolInfo("C_ABC_Iteration", PACKAGE = "NoC")
devtools::install()
devtools::install()
devtools::load_all()
data( Aves )
CD_ABC( 1e4, x = Aves$Effort_Proxy, t = Aves$Discovery_Times, theta_N = c(1e9, 2), theta_x = 1,
theta_l = c(log(20), 0.2) )
getNativeSymbolInfo("C_ABC_Iteration", PACKAGE = "NoC")
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::build()
devtools::install()
library( NoC )
data( Aves )
CD_ABC( 1e4, x = Aves$Effort_Proxy, t = Aves$Discovery_Times, theta_N = c(1e9, 2), theta_x = 1,
theta_l = c(log(20), 0.2) )
getNativeSymbolInfo("C_ABC_Iteration", PACKAGE = "NoC")
devtools::load_all()
CD_ABC( 1e4, x = Aves$Effort_Proxy, t = Aves$Discovery_Times, theta_N = c(1e9, 2), theta_x = 1,
theta_l = c(log(20), 0.2) )
getNativeSymbolInfo("C_ABC_Iteration", PACKAGE = "NoC")
devtools::clean_dll()      # Cleans up old compiled objects
devtools::document()       # Regenerates NAMESPACE and documentation
devtools::build()          # Builds the package
devtools::install()        # Installs the package
library( NoC )
data( Aves )
CD_ABC( 1e4, x = Aves$Effort_Proxy, t = Aves$Discovery_Times, theta_N = c(1e9, 2), theta_x = 1,
theta_l = c(log(20), 0.2) )
getNativeSymbolInfo("C_ABC_Iteration", PACKAGE = "NoC")
NoC::CD_ABC( 1e4, x = Aves$Effort_Proxy, t = Aves$Discovery_Times, theta_N = c(1e9, 2), theta_x = 1,
theta_l = c(log(20), 0.2) )
NoC:::CD_ABC( 1e4, x = Aves$Effort_Proxy, t = Aves$Discovery_Times, theta_N = c(1e9, 2), theta_x = 1,
theta_l = c(log(20), 0.2) )
devtools::clean_dll()      # Cleans up old compiled objects
devtools::document()       # Regenerates NAMESPACE and documentation
devtools::build()          # Builds the package
devtools::install()        # Installs the package
library( NoC )
data( Aves )
CD_ABC( 1e4, x = Aves$Effort_Proxy, t = Aves$Discovery_Times, theta_N = c(1e9, 2), theta_x = 1,
theta_l = c(log(20), 0.2) )
CD_ABC( 1e4, x = Aves$Effort_Proxy, t = Aves$Discovery_Times, theta_N = c(1e9, 1.1), theta_x = log(2),
theta_l = c(log(30), 0.08), m = 20 )
data( Aves )
library( NoC )
data( Aves )
CD_ABC( 1e4, x = Aves$Effort_Proxy, t = Aves$Discovery_Times, theta_N = c(1e9, 1.1), theta_x = log(2),
theta_l = c(log(30), 0.08), m = 20 )
data( Aves )
CD_ABC( 1e4, x = Aves$Effort_Proxy, t = Aves$Discovery_Times, theta_N = c(1e9, 1.1), theta_x = log(2),
theta_l = c(log(30), 0.08), m = 20, cores = 7 )
data( Aves )
CD_ABC( 1e4, x = Aves$Effort_Proxy, t = Aves$Discovery_Times, theta_N = c(log(1e9), 1.1), theta_x = log(2),
theta_l = c(log(30), 0.08), m = 20, cores = 7 )
set.seed( 100 )
res <- CD_ABC( 1e4, x = Aves$Effort_Proxy, t = Aves$Discovery_Times, theta_N = c(log(1e9), 1.1),
theta_x = log(2), theta_l = c(log(30), 0.08), m = 20, cores = 7 )
set.seed( 100 )
pilot_run <- CD_ABC( 1e4, x = Aves$Effort_Proxy, t = Aves$Discovery_Times, theta_N = c(log(1e9), 1.1),
theta_x = log(2), theta_l = c(log(30), 0.08), m = 20, cores = detectCores()-1 )
detectCores()
library( NoC )
pilot_run <- CD_ABC( 1e4, x = Aves$Effort_Proxy, t = Aves$Discovery_Times, theta_N = c(log(1e9), 1.1),
theta_x = log(2), theta_l = c(log(30), 0.08), m = 20, cores = detectCores()-1 )
library( parallel )
set.seed( 100 )
pilot_run <- CD_ABC( 1e4, x = Aves$Effort_Proxy, t = Aves$Discovery_Times, theta_N = c(log(1e9), 1.1),
theta_x = log(2), theta_l = c(log(30), 0.08), m = 20, cores = detectCores()-1 )
thresh
thresh <- quantile( pilot_run$distance, 0.1 )
thresh
actual_run <- CD_ABC( 1e5, x = Aves$Effort_Proxy, t = Aves$Discovery_Times, theta_N = c(log(1e9), 1.1),
theta_x = log(2), theta_l = c(log(30), 0.08), m = 20, cores = detectCores()-1,
epsilon = thresh )
data( Aves )
?Aves
?data
library( NoC )
?Aves
devtools::document()
?Aves
?Aves
data( Aves )
set.seed( 100 )
pilot_run <- CD_ABC( 1e4, x = Aves$Effort_Proxy, t = Aves$Discovery_Times, theta_N = c(log(1e9), 1.1),
theta_x = log(2), theta_l = c(log(30), 0.08), m = 20, cores = detectCores()-1 )
thresh <- quantile( pilot_run$distance, 0.1 )
actual_run <- CD_ABC( 1e5, x = Aves$Effort_Proxy, t = Aves$Discovery_Times, theta_N = c(log(1e9), 1.1),
theta_x = log(2), theta_l = c(log(30), 0.08), m = 20, cores = detectCores()-1,
epsilon = thresh )
plot( actual_run$C, type = 'l' )
plot( density(actual_run$C), type = 'l' )
devtools::document()
devtools::document()
?CD_ABC
devtools::check()
devtools::document()
?CD_ABC
devtools::check()
devtools::document()
?CD_ABC
devtools::document()
?CD_ABC
devtools::check()
devtools::document()
?CD_ABC
devtools::check()
devtools::build()
devtools::document()
devtools::check()
devtools::check(cran = TRUE)
?devtools
?devtools::check
devtools::check()
?devtools::build()
?parLapply
cores
devtools::document()
devtools::check()
?lapply
?parLapply
?lapply
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::build()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check( cran = TRUE )
devtools::build()
rhub::check_for_cran()
install.packages( 'rhub' )
rhub::check_for_cran()
?rhubv2
devtools::check_win_devel()
usethis::use_readme_rmd()
devtools::document()
devtools::check( cran = TRUE )
devtools::build()
devtools::check_win_devel()
