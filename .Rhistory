save( Aves, file = 'Aves.Rdata')
load( file = 'Isopoda' )
load( file = 'Isopoda.Rdata' )
Isopoda
names( Isopoda$Discovery_Times ) <- t_ind
Isopoda
save( Isopoda, file = 'Isopoda.Rdata')
load( 'Mammalia.Rdata' )
names( Mammalia$Discovery_Times ) <- t_ind
save( Mammalia, file = 'Mammalia.Rdata')
load( 'Nematoda.Rdata' )
save( Nematoda, file = 'Nematoda.Rdata')
Aves
as.data.frame(Aves)
Aves <- as.data.frame(Aves)
save( Aves, file = 'Aves.Rdata')
Isopoda <- as.data.frame(Isopoda)
Isopoda
save( Isopoda, file = 'Isopoda.Rdata')
Mammalia <- as.data.frame(Mammalia)
Mammalia
save( Mammalia, file = 'Mammalia.Rdata')
Nematoda <- as.data.frame(Nematoda)
Nematoda
save( Nematoda, file = 'Nematoda.Rdata')
devtools::document()
devtools::check()
load( file = 'data/Aves.Rdata' )
load( file = 'data/Isopoda.Rdata' )
load( file = 'data/Mammalia.Rdata' )
load( file = 'data/Nematoda.Rdata' )
usethis::use_data(Aves, Isopoda, Mammalia, Nematoda, overwrite = TRUE)
devtools::document()
devtools::check()
devtools::build()
install.packages("../NoC_0.1.0.tar.gz", repos = NULL, type = "source")
library( NoC )
data( Aves )
Aves
install.packages("../NoC_0.1.0.tar.gz", repos = NULL, type = "source")
library( NoC )
data( Aves )
Aves
?Aves
?CD_ABC
?sort
library( NoC )
?CD_ABC
data( Aves )
?Aves
?AirPassengers
?Mammalia
data( Mammalia )
Aves
Mammalia
plot( Mammalia$Discovery_Times )
plot( Aves$Discovery_Times )
devtools::check()
devtools::document()
devtools::check()
devtools::build()
?Aves
devtools::document()
?Aves
devtools::document()
?Aves
devtools::document()
?Aves
devtools::document()
?Aves
?Isopoda
CD_ABC( 1e4, x = Aves$Effort_Proxy, t = Aves$Discovery_Times, c(1e9, 0.2), 1, c(5, 0.01))
devtools::check()
devtools::check()
devtools::build()
install.packages("../NoC_0.1.0.tar.gz", repos = NULL, type = "source")
library( NoC )
?CD_ABC
data( Aves )
CD_ABC( 1e4, x = Aves$Effort_Proxy, t = Aves$Discovery_Times, theta_N = c(1e9, 2), theta_x = 1,
theta_l = c(log(20), 0.2) )
devtools::clean_dll()
devtools::clean_dll()
devtools::check()
devtools::build()
devtools::install()
data( Aves )
CD_ABC( 1e4, x = Aves$Effort_Proxy, t = Aves$Discovery_Times, theta_N = c(1e9, 2), theta_x = 1,
theta_l = c(log(20), 0.2) )
devtools::install()
library( NoC )
data( Aves )
CD_ABC( 1e4, x = Aves$Effort_Proxy, t = Aves$Discovery_Times, theta_N = c(1e9, 2), theta_x = 1,
theta_l = c(log(20), 0.2) )
getNativeSymbolInfo("C_ABC_Iteration", PACKAGE = "NoC")
devtools::clean_dll()
devtools::check()
devtools::build()
devtools::install()
library( NoC )
data( Aves )
CD_ABC( 1e4, x = Aves$Effort_Proxy, t = Aves$Discovery_Times, theta_N = c(1e9, 2), theta_x = 1,
theta_l = c(log(20), 0.2) )
getNativeSymbolInfo("C_ABC_Iteration", PACKAGE = "NoC")
devtools::install()
devtools::install()
devtools::load_all()
data( Aves )
CD_ABC( 1e4, x = Aves$Effort_Proxy, t = Aves$Discovery_Times, theta_N = c(1e9, 2), theta_x = 1,
theta_l = c(log(20), 0.2) )
getNativeSymbolInfo("C_ABC_Iteration", PACKAGE = "NoC")
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::build()
devtools::install()
library( NoC )
data( Aves )
CD_ABC( 1e4, x = Aves$Effort_Proxy, t = Aves$Discovery_Times, theta_N = c(1e9, 2), theta_x = 1,
theta_l = c(log(20), 0.2) )
getNativeSymbolInfo("C_ABC_Iteration", PACKAGE = "NoC")
devtools::load_all()
CD_ABC( 1e4, x = Aves$Effort_Proxy, t = Aves$Discovery_Times, theta_N = c(1e9, 2), theta_x = 1,
theta_l = c(log(20), 0.2) )
getNativeSymbolInfo("C_ABC_Iteration", PACKAGE = "NoC")
devtools::clean_dll()      # Cleans up old compiled objects
devtools::document()       # Regenerates NAMESPACE and documentation
devtools::build()          # Builds the package
devtools::install()        # Installs the package
library( NoC )
data( Aves )
CD_ABC( 1e4, x = Aves$Effort_Proxy, t = Aves$Discovery_Times, theta_N = c(1e9, 2), theta_x = 1,
theta_l = c(log(20), 0.2) )
getNativeSymbolInfo("C_ABC_Iteration", PACKAGE = "NoC")
NoC::CD_ABC( 1e4, x = Aves$Effort_Proxy, t = Aves$Discovery_Times, theta_N = c(1e9, 2), theta_x = 1,
theta_l = c(log(20), 0.2) )
NoC:::CD_ABC( 1e4, x = Aves$Effort_Proxy, t = Aves$Discovery_Times, theta_N = c(1e9, 2), theta_x = 1,
theta_l = c(log(20), 0.2) )
devtools::clean_dll()      # Cleans up old compiled objects
devtools::document()       # Regenerates NAMESPACE and documentation
devtools::build()          # Builds the package
devtools::install()        # Installs the package
library( NoC )
data( Aves )
CD_ABC( 1e4, x = Aves$Effort_Proxy, t = Aves$Discovery_Times, theta_N = c(1e9, 2), theta_x = 1,
theta_l = c(log(20), 0.2) )
CD_ABC( 1e4, x = Aves$Effort_Proxy, t = Aves$Discovery_Times, theta_N = c(1e9, 1.1), theta_x = log(2),
theta_l = c(log(30), 0.08), m = 20 )
data( Aves )
library( NoC )
data( Aves )
CD_ABC( 1e4, x = Aves$Effort_Proxy, t = Aves$Discovery_Times, theta_N = c(1e9, 1.1), theta_x = log(2),
theta_l = c(log(30), 0.08), m = 20 )
data( Aves )
CD_ABC( 1e4, x = Aves$Effort_Proxy, t = Aves$Discovery_Times, theta_N = c(1e9, 1.1), theta_x = log(2),
theta_l = c(log(30), 0.08), m = 20, cores = 7 )
data( Aves )
CD_ABC( 1e4, x = Aves$Effort_Proxy, t = Aves$Discovery_Times, theta_N = c(log(1e9), 1.1), theta_x = log(2),
theta_l = c(log(30), 0.08), m = 20, cores = 7 )
set.seed( 100 )
res <- CD_ABC( 1e4, x = Aves$Effort_Proxy, t = Aves$Discovery_Times, theta_N = c(log(1e9), 1.1),
theta_x = log(2), theta_l = c(log(30), 0.08), m = 20, cores = 7 )
set.seed( 100 )
pilot_run <- CD_ABC( 1e4, x = Aves$Effort_Proxy, t = Aves$Discovery_Times, theta_N = c(log(1e9), 1.1),
theta_x = log(2), theta_l = c(log(30), 0.08), m = 20, cores = detectCores()-1 )
detectCores()
library( NoC )
pilot_run <- CD_ABC( 1e4, x = Aves$Effort_Proxy, t = Aves$Discovery_Times, theta_N = c(log(1e9), 1.1),
theta_x = log(2), theta_l = c(log(30), 0.08), m = 20, cores = detectCores()-1 )
library( parallel )
set.seed( 100 )
pilot_run <- CD_ABC( 1e4, x = Aves$Effort_Proxy, t = Aves$Discovery_Times, theta_N = c(log(1e9), 1.1),
theta_x = log(2), theta_l = c(log(30), 0.08), m = 20, cores = detectCores()-1 )
thresh
thresh <- quantile( pilot_run$distance, 0.1 )
thresh
actual_run <- CD_ABC( 1e5, x = Aves$Effort_Proxy, t = Aves$Discovery_Times, theta_N = c(log(1e9), 1.1),
theta_x = log(2), theta_l = c(log(30), 0.08), m = 20, cores = detectCores()-1,
epsilon = thresh )
data( Aves )
?Aves
?data
library( NoC )
?Aves
devtools::document()
?Aves
?Aves
data( Aves )
set.seed( 100 )
pilot_run <- CD_ABC( 1e4, x = Aves$Effort_Proxy, t = Aves$Discovery_Times, theta_N = c(log(1e9), 1.1),
theta_x = log(2), theta_l = c(log(30), 0.08), m = 20, cores = detectCores()-1 )
thresh <- quantile( pilot_run$distance, 0.1 )
actual_run <- CD_ABC( 1e5, x = Aves$Effort_Proxy, t = Aves$Discovery_Times, theta_N = c(log(1e9), 1.1),
theta_x = log(2), theta_l = c(log(30), 0.08), m = 20, cores = detectCores()-1,
epsilon = thresh )
plot( actual_run$C, type = 'l' )
plot( density(actual_run$C), type = 'l' )
devtools::document()
devtools::document()
?CD_ABC
devtools::check()
devtools::document()
?CD_ABC
devtools::check()
devtools::document()
?CD_ABC
devtools::document()
?CD_ABC
devtools::check()
devtools::document()
?CD_ABC
devtools::check()
devtools::build()
devtools::document()
devtools::check()
devtools::check(cran = TRUE)
?devtools
?devtools::check
devtools::check()
?devtools::build()
?parLapply
cores
devtools::document()
devtools::check()
?lapply
?parLapply
?lapply
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::build()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check( cran = TRUE )
devtools::build()
rhub::check_for_cran()
install.packages( 'rhub' )
rhub::check_for_cran()
?rhubv2
devtools::check_win_devel()
usethis::use_readme_rmd()
devtools::document()
devtools::check( cran = TRUE )
devtools::build()
devtools::check_win_devel()
devtools::install_github("DanDempsey/NoC")
?CD_ABC
library( NoC )
?CD_ABC
data( Mammalia )
Mammalia$Effort_Proxy
nms <- names( Mammalia )
nms
nms[1] <- 'Author_Numbers'
names( Mammalia ) <- nms
Mammalia
data( Aves )
names( Aves ) <- nms
data( "Isopoda" )
names( Isopoda ) <- nms
data( "Nematoda" )
names( Nematoda ) <- nms
save( Mammalia, file = 'data/Mammalia.rda' )
save( Aves, file = 'data/Aves.rda' )
save( Isopoda, file = 'data/Isopoda.rda' )
save( Nematoda, file = 'data/Nematoda.rda' )
nms
devtools::document()
?Mammalia
nms
nms[2] <- 'Discovery_Numbers'
names( Mammalia ) <- nms
names( Aves ) <- nms
names( Isopoda ) <- nms
names( Isopoda ) <- nms
names( Nematoda ) <- nms
save( Mammalia, file = 'data/Mammalia.rda' )
save( Aves, file = 'data/Aves.rda' )
save( Isopoda, file = 'data/Isopoda.rda' )
save( Nematoda, file = 'data/Nematoda.rda' )
devtools::document()
?Mammalia
devtools::document()
pkgload::dev_help('Catalogue of Life Data')
devtools::document()
?Mammalia
devtools::document()
?Mammalia
devtools::document()
?Mammalia
devtools::document()
?Mammalia
devtools::document()
?Mammalia
devtools::document()
?CD_ABC
plot( Mammalia$Discovery_Numbers, type = 'l' )
plot( Mammalia$Author_Numbers, type = 'l' )
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
pilot_run <- CD_ABC( 1e3, x = Mammalia$Author_Numbers, t = Mammalia$Discovery_Numbers,
theta_N = c(log(1e9), 1.1), theta_x = log(1),
theta_l = c(log(30), 0.15), m = 20 )
thresh <- quantile( pilot_run$distance, 0.1 )
actual_run <- CD_ABC( 1e4, x = Mammalia$Author_Numbers, t = Mammalia$Discovery_Numbers,
theta_N = c(log(1e9), 1.1), theta_x = log(1),
theta_l = c(log(30), 0.15), m = 20, epsilon = thresh )
library(NoC)
data( Mammalia )
plot( Mammalia$Discovery_Numbers, type = 'l' )
plot( Mammalia$Author_Numbers, type = 'l' )
plot( density(actual_run$C), type = 'l' )
xhat <- actual_run$x_hat
plot( x, type = 'n', ylim = range(rbind(x, xhat)), ylab = 'Effort Proxy',
xlab = 'Time' )
xhat <- actual_run$x_hat
x <- Mammalia$Effort_Numbers
plot( x, type = 'n', ylim = range(rbind(x, xhat)), ylab = 'Effort Proxy',
xlab = 'Time' )
xhat <- actual_run$x_hat
x <- Mammalia$Effort_Numbers
plot( x, type = 'n', ylim = range(rbind(x, xhat)), ylab = 'Effort Proxy',
xlab = 'Time' )
range(rbind(x, xhat))
x
Mammalia$Effort_Numbers
Mammalia
Mammalia$Author_Numbers
x <- Mammalia$Author_Numbers
plot( x, type = 'n', ylim = range(rbind(x, xhat)), ylab = 'Effort Proxy',
xlab = 'Time' )
that <- actual_run$t_hat
t <- Mammalia$Discovery_Numbers
that
t
xhat <- actual_run$x_hat
x <- Mammalia$Author_Numbers
plot( x, type = 'n', ylim = range(rbind(x, xhat)), ylab = 'Effort Proxy',
xlab = 'Time' )
grid()
for ( i in 1:nrow(xhat) ) {
lines( xhat[i, ], col = alpha('grey', 0.5) )
}
library( scales )
library( scales )
xhat <- actual_run$x_hat
x <- Mammalia$Author_Numbers
plot( x, type = 'n', ylim = range(rbind(x, xhat)), ylab = 'Effort Proxy',
xlab = 'Time' )
grid()
for ( i in 1:nrow(xhat) ) {
lines( xhat[i, ], col = alpha('grey', 0.5) )
}
lines( x )
dev.off()
that <- actual_run$t_hat
t <- Mammalia$Discovery_Numbers
plot( t, type = 'n', ylim = range(rbind(t, that)), ylab = 'Number of Discoveries',
xlab = 'Time' )
grid()
for ( i in 1:nrow(that) ) {
lines( that[i, ], col = alpha('grey', 0.5) )
}
lines( t )
dev.off()
library( scales )
xhat <- actual_run$x_hat
x <- Mammalia$Author_Numbers
plot( x, type = 'n', ylim = range(rbind(x, xhat)), ylab = 'Effort Proxy',
xlab = 'Time' )
grid()
for ( i in 1:nrow(xhat) ) {
lines( xhat[i, ], col = alpha('grey', 0.5) )
}
lines( x )
dev.off()
that <- actual_run$t_hat
t <- Mammalia$Discovery_Numbers
plot( t, type = 'n', ylim = range(rbind(t, that)), ylab = 'Number of Discoveries',
xlab = 'Time' )
grid()
for ( i in 1:nrow(that) ) {
lines( that[i, ], col = alpha('grey', 0.5) )
}
lines( t )
library( scales )
xhat <- actual_run$x_hat
x <- Mammalia$Author_Numbers
plot( x, type = 'n', ylim = range(rbind(x, xhat)), ylab = 'Effort Proxy',
xlab = 'Time' )
grid()
for ( i in 1:nrow(xhat) ) {
lines( xhat[i, ], col = alpha('grey', 0.5) )
}
lines( x )
that <- actual_run$t_hat
t <- Mammalia$Discovery_Numbers
plot( t, type = 'n', ylim = range(rbind(t, that)), ylab = 'Number of Discoveries',
xlab = 'Time' )
grid()
for ( i in 1:nrow(that) ) {
lines( that[i, ], col = alpha('grey', 0.5) )
}
lines( t )
Mammalia$Discovery_Numbers
plot( Mammalia$Discovery_Numbers, type = 'l' )
plot( Mammalia$Author_Numbers, type = 'l' )
library(NoC)
data( Mammalia )
plot( pressure )
plot( Mammalia$Discovery_Numbers, type = 'l' )
plot( Mammalia$Author_Numbers, type = 'l' )
data( Mammalia )
library( NoC )
data( Mammalia )
library( NoC )
data( Mammalia )
plot( Mammalia$Discovery_Numbers, type = 'l' )
plot( Mammalia$Author_Numbers, type = 'l' )
devtools::document()
devtools::check( cran = TRUE )
devtools::build()
devtools::install()
devtools::install()
library( NoC )
data( "Mammalia" )
Mammalia
rownames(Mammalia)
devtools::document()
devtools::check( cran = TRUE )
devtools::build()
devtools::build()
devtools::install()
devtools::check_win_devel()
devtools::document()
devtools::check( cran = TRUE )
devtools::document()
devtools::check( cran = TRUE )
devtools::build()
devtools::install()
rhub::check_for_cran()
?rhubv2
?gitcreds::gitcreds_set
gitcreds::gitcreds_set()
rhub::rhub_setup()
rhub::rhub_doctor()
#rhub::rhub_setup()
#rhub::rhub_doctor()
rhub::rhub_check()
?rhub::rhub_check
devtools::check( cran = TRUE )
devtools::check( cran = TRUE )
xx <- 1:100
plot( asinh(xx) )
lines( log(xx) )
xx <- (-100):100
plot( asinh(xx) )
lines( log(xx) )
log(2)
xx <- 1:100
ylog <- log(xx)
yash <_ asinh(xx)
yash <- asinh(xx)
exp( ylog - yash )
ylog - yash
log(2)
exp( yash - ylog )
plot( exp( yash - ylog ) )
lines( h = 2 )
abline( h = 2 )
library( NoC )
?Aves
#devtools::document()
devtools::check( cran = TRUE )
data( Aves )
set.seed( 100 )
pilot_run <- CD_ABC( 1e3, x = Aves$Author_Numbers, t = Aves$Discovery_Numbers,
theta_N = c(log(1e9), 1.1), theta_x = log(2),
theta_l = c(log(30), 0.08), m = 20 )
data( Mammalia )
set.seed( 100 )
pilot_run <- CD_ABC( 1e3, x = Mammalia$Author_Numbers, t = Mammalia$Discovery_Numbers,
theta_N = c(log(1e9), 1.1), theta_x = log(2),
theta_l = c(log(30), 0.08), m = 20 )
thresh <- quantile( pilot_run$distance, 0.1 )
thresh
actual_run <- CD_ABC( 1e3, x = Mammalia$Author_Numbers, t = Mammalia$Discovery_Numbers,
theta_N = c(log(1e9), 1.1), theta_x = log(2),
theta_l = c(log(30), 0.08), m = 20, epsilon = 1200 )
plot( density(actual_run$C), type = 'l' )
actual_run$C
data( Mammalia )
set.seed( 100 )
### Small number of iterations for illustration purposes
actual_run <- CD_ABC( 1e3, x = Mammalia$Author_Numbers, t = Mammalia$Discovery_Numbers,
theta_N = c(log(1e9), 1.1), theta_x = log(2),
theta_l = c(log(30), 0.08), m = 20, epsilon = 1200 )
plot( density(actual_run$C), type = 'l' )
#devtools::document()
devtools::check( cran = TRUE )
#devtools::document()
devtools::check( cran = TRUE )
Of all the input parameters for `CD_ABC`, 6 of these **must** be supplied by the user for the function to work. They are `iters` (the number of ABC iterations), `x` (the effort proxy), `t` (the discovery times) and three vectors that correspond to prior parameters, `theta_N`, `theta_l`, and `theta_x`. `theta_N` is a vector of length two, corresponding to the mean and standard deviation of the species abundance on the log scale. `theta_l` is also a vector of length two, encoding the settings of an Intrinsic Gaussian Markov Random Field (IGMRF), which represents a **latent** effort process. The first component of `theta_l` is the starting value of the latent effort process, and the second is the standard deviation. Finally, `theta_x` is a scalar that represents the difference in mean between the observed effort proxy and the latent effort process; for our example, we assume this to roughly correspond to the number of unique discoveries per author.
